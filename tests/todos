
TODO add new sentences menu (with semi automatic translations)

TODO interface (or manager?) logic that uses known_words and trusted fields to decide what to query

TODO type annotations, docs


TODO main bits of gui
 standalone sentence adder
 the cards themselves (when do the notes get created? must be in the table gui, no?

TODO make it so it doesnt crash instantly if robots requests fail. Offline mode in general
 -> this should be easily fixable by making the robots sessions lazy


CC-BY 2.0 : we can do anything as long as we credit properly, indicate changes, and propagate the license
A note on propagating the license - from what I understand this doesnt' mean the whole project has to be CC-BY 2.0
either way cc doesn't actually prohibit anything specific other than changing the license or misattribution, so fine


TODO cleanup note creation, allow for separate decks

TODO improve the obj registrar - to, like above, allow separate decks

TODO callbacks st sentence production manager can prefer grabbing comprehensible sentences (in principle:
      callback returns a score 0-1. spm grabs sentences, at most the desired amount, popping stuff if it finds better
      options. considers itself to be done if it has found comprehensibility >0.8 for all sentences

TODO card html - esp care w the logic on the sentences - separate known, discard remainder if have enough, etc
 and the random sorting, minute-based

TODO separate the HTML/CSS defaults into other files

TODO port decks (incl. rtk to migaku... somehow?)

TODO help menus <- default_colors class

TODO option to add machine translated sentences (tag them in db + gui)

TODO there are some timeout issues - with the robots, I think? or maybe the translator? it's unclear but sometimes if
 you leave anki alone for a few minutes it throws an exception out of the blue

TODO better dicts. either:
 no dicts at all
 get definitions and html from yomichan via selenium
 get definitions from yomichan via selenium and parse what we can
 get definitions from our own files and parse what we can
  note of the last two - parsing our own files is no harder than doing things through selenium and does NOT insert a
  massive dependency in the project - the only reason to go via selenium is to use yomichan dicts instead of redownload
  (yomichan files are not readily visible)

TODO config options for showing definitions on either language (i.e. monolingual mode toggle)
 -> the easiest way to accomplish this is to edit card html directly

TODO probably is a good idea to make it obvious when a new card is shown iykyk

TODO segregate user_files content by active user - the config files, anyway, but not sentence.db or the big downloads

TODO set up hooks st if a deck is deleted the corresponding words in our db stop being marked as known
 there lurks there a more complicated question ab how much redundance there should be between the two dbs
 n_known_words and such are good for querying but is Keyword.known actually useful? if so, should we also store
 whether it's known in the ttbtr deck or one of the other ones? maybe we should store the note/card id, too, then?
 ...
 i think the right answer is to avoid enforced redundancy - simply not worth the hassle, seems like a smell even
 will need to set up the hooks mentioned above, though, which means a way to unmark words as known when removed
 to avoid updating every single row the flow should be
 get known words from db -> check against anki collection -> update what is necessary
 (this on top of the reverse flow that we already have implemented w the proper hooks)
 ...
 continuing on the above: no, even less redundancy is probably good
 after updating keyword.known we always call the update functions for the whole db, anyway
 so probably for the best to remove keyword.known altogether and just create temp tables for update whenever relevant

TODO better db init: if no exist create w/o covering index, then insert, then create covering index




TODO el rollo
 https://github.com/ankitects/anki/blob/63c2a09ef6760890c03be4bd83f613c03c512d1f/docs/contributing.md
 per updatear
 https://github.com/ankitects/anki/blob/63c2a09ef6760890c03be4bd83f613c03c512d1f/qt/aqt/sound.py#L866
 play_clicked_audio st it can interpret things like play:q:1,2,5
 this will take a bit - currently it seems like the automatic checking w pull requests is having trouble
 when that's fixed we'll figure out how to contribute. will be a quick change

TODO if i put the bakamitai lyrics through the mine words widget - "I love you" (part of the lyrics) doesnt show in any
 of the boxes - where is it getting lost?

TODO get rid of the annoying logs